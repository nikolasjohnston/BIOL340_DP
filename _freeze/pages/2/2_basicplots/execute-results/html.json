{
  "hash": "151b99e9878876707dff8bc7dc4aace4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic plots\"\nauthor: \"Mitchell Stares\"\nweight: 33\ndate: \"2018-11-10\"\noutput: blogdown::html_page\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n\nTo start, we will use the iris dataset that is built into tidyverse/ggplot2. To view the dataset, use the `View()` command like so:  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(iris)\n```\n:::\n\n\n\nOnce we have this, let's setup a basic boxplot of some of the features of **iris**.  \n\nThe iris dataset is built into tidyverse/ggplot2. The dataset is a pretty famous dataset by Edgar Anderson that gives the sepal length, width and petal length and width for three species of iris (n=50).  \n\nWe are going to begin by plotting the sepal length for each species in a basic boxplot.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris.box <- ggplot(iris, aes(x=Species,y=Sepal.Length)) +\n  geom_boxplot()\n\niris.box # We have to run a line with the name of the plot object to view the graph. \n```\n\n::: {.cell-output-display}\n![](2_basicplots_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nSo far, pretty straight forward.\n\nYou will notice I saved the ggplot() graph to an object called **iris.box**. Because I saved the plot to an object, I have to run the object name to view the plot. This is identical to using the command `print(iris.box)`.\n\n::: callout\nggplot graphs do no need to be saved as an object. You can run all of the commands singularly or as a group. The graph will still be produced. I personally prefer to save them to an object. \n:::\n\nNow let's look at some others, such as a **histogram.**  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris.hist <- ggplot(iris, aes(x=Sepal.Length)) +\n  geom_histogram()\n\niris.hist\n```\n\n::: {.cell-output-display}\n![](2_basicplots_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nThat's pretty ugly, but a simple addition of **binwidth=\"value\"** will fix that. Binwidth refers to the width of each bin, or bar, in the frequency histogram. A bin width of 0.5 means each bar of the histogram will be equal to 0.5 on the x axis (e.g. 4, 4.5, 5, 5.5 etc).  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris.hist <- ggplot(iris, aes(x=Sepal.Length)) +\n  geom_histogram(binwidth = 0.5)\n\niris.hist\n```\n\n::: {.cell-output-display}\n![](2_basicplots_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nNow let's look at a **scatterplot**.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris.scatter <- ggplot(iris, aes(x=Sepal.Length,y=Petal.Length)) + \n  geom_point()\n\niris.scatter\n```\n\n::: {.cell-output-display}\n![](2_basicplots_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nThe cool thing we can do with scatterplots is colour the points by a categorical feature such as Species. This is done by adding **colour = \"categorical variable name\"** in the aes brackets of the `ggplot()` command.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris.scatter <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, colour=Species)) +\n  geom_point()\niris.scatter\n```\n\n::: {.cell-output-display}\n![](2_basicplots_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nMuch better. And it even adds a legend for us.\n\nNow we have this basic setup, we can start adding things to our graph. Due to the immense amount of customisations for our graphs, I will break these down in to sections as much as possible and explain as I go. We will work with the iris dataset for a while before moving to our analysed datasets.\n\n",
    "supporting": [
      "2_basicplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}