{
  "hash": "7a853039c33201d5158c9f4909ae4e53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Columns\"\nweight: 9\ndate: '2018-10-26'\nauthor: \"Mitchell Stares\"\noutput: blogdown::html_page\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nAnother important aspect of R coding syntax is refering to specific columns. This is done by using a **\\$** sign after specifying our dataset and then calling the column. Like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(weeds$flowers.m3) # This says to run the head() command but only on the flowers.m3 column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14 17 23 26 35 45\n```\n\n\n:::\n:::\n\n\n\n\nTry this with some of the other commands above. *Note: Some of them will not work and will show NULL. This is because these are designed to view aspects of the data frame (e.g. names() )*\n\n**Now we know how to refer to a column, we can fix any issues with importing incorrect data**\n\nPretend for a moment our data was input incorrectly:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweeds$species<-factor(weeds$species)\n```\n:::\n\n\n\n\nThis would simply save the command `factor()` on the column species to our weeds object.\n\nIf we wanted an ordered factor, e.g. small \\< medium \\< large we can use the following\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## example dataset ##\nsizes <- factor(c(\"small\", \"large\", \"large\", \"small\", \"medium\", \"medium\")) # creating a single column factor with 3 levels\nsizes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] small  large  large  small  medium medium\nLevels: large medium small\n```\n\n\n:::\n:::\n\n\n\n\nHere we have just created a new example dataset which consists of a single column, containing the words: small, large and medium in a random order.\n\nWe can order these into a logical order, so R will know that medium is bigger than small and large is bigger than medium\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsizes <- ordered(sizes, levels = c(\"small\", \"medium\", \"large\")) # ordering levels from small through to large.\n# Note: I did not need to specify column as this is a single column dataset. \nsizes # Now the factor is ordered.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] small  large  large  small  medium medium\nLevels: small < medium < large\n```\n\n\n:::\n:::\n\n\n\n\nWe can then do this with our weeds dataset, ordering them in a nonsensical order.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweeds$species<-ordered(weeds$species, levels=c(\"Pultenaea\", \"Olearia\", \"Coprosma\"))\n```\n:::\n\n\n\n\nThis is useful when the dataset you are working with has an ordered factor.\n\n**The main use for this is in graphing**\n\n\n\n\n\n\n\n\n\nBy default, R will always sort in alphabetical order, which can be a pain when graphing. If you want ordered factors, or want to present factors along an X axis in a more logical order then the `ordered()` command or even `factor()` command where you specify levels is a good option.\n\n::: callout\nI recommend using the **factor()** command and specifying the levels using the same syntax as the **ordered()** command unless your factor is truely ordered. This way we just sort the factor the way we want, but are not messing with the way R views our variable (as an ordinal variable rather than a logically ordered factor).\n:::\n\nIf you want to change something to a continuous (numeric, integer etc.) its a little more complicated, but in general R shouldn't mess this up too often. A quick google search or `?numeric` will help answer this.\n",
    "supporting": [
      "3_columns_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}