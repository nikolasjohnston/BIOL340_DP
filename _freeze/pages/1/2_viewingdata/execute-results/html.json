{
  "hash": "5e4c3a38fb5e6203151f6b2da595e1f6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Viewing your data\"\nweight: 9\ndate: '2018-10-30'\noutput: blogdown::html_page\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nNow we have become acquainted with our working directories and the R environment, its time to explore our newely imported data. For this, we will be using the **weeds** dataset. Ensure your data is loaded in and then either use the **View()** command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweeds <- read.csv(\"weeds.csv\")\nView(weeds)\n# This will open up a new tab to view your data\n```\n:::\n\n\n\n\nor click the variable name in the environment window.\n\n![](/images/view.png)\n\nThis should bring up a separate tab in Rstudio which you should be able to see the 4 columns (weeds, soil, species & flowers.m3).\\\nNow we can see our data, we can investigate the way R has input our data. The best thing to do is to ensure your categorical variables are categorical, and our continuous are continuous, much like we do in programs like JMP.\n\n![](/images/jmp_factor.png)\n\nIn JMP, we have the icons to identify **categorical/nominal, ordinal** or **continuous**. In R, all we do is run a single line of code to view the same thing across the different columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(weeds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t48 obs. of  4 variables:\n $ weeds     : chr  \"weed\" \"weed\" \"weed\" \"weed\" ...\n $ soil      : chr  \"sandstone\" \"sandstone\" \"sandstone\" \"sandstone\" ...\n $ species   : chr  \"Coprosma\" \"Coprosma\" \"Coprosma\" \"Coprosma\" ...\n $ flowers.m3: int  14 17 23 26 35 45 36 28 28 39 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# str stands for \"structure\" and will tell us the formats of each data column, as well as the number of levels when we have a factor (categorical) column\n```\n:::\n\n\n\n\n`str()` also shows us the number of levels we have in a factor. So if we put in a bad dataset with different capitalisations or misspellings on factor levels, we can identify here how many we want vs. how many we have. Its a quick and easy way to assess your data.\n\nAs you can see in the **weeds** example, we have *weeds, soil* & *species* as factors (categorical) and *flowers.m3* as an integer (one of many continuous data types, in this case, whole numbers).\n\n**We will follow up on how to fix an incorrect column shortly**\n\nOther data viewing commands can be used to view certain aspects of your data without bringing up the entire data set in a new tab. These are as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(weeds) # This will show the top few rows of your data so you can check it without loading the entire table\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  weeds      soil   species flowers.m3\n1  weed sandstone  Coprosma         14\n2  weed sandstone  Coprosma         17\n3  weed sandstone  Coprosma         23\n4  weed sandstone  Coprosma         26\n5  weed sandstone Pultenaea         35\n6  weed sandstone Pultenaea         45\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(weeds) # The same as head() but shows the bottom rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    weeds  soil   species flowers.m3\n43 native shale Pultenaea         49\n44 native shale Pultenaea         20\n45 native shale   Olearia         32\n46 native shale   Olearia         51\n47 native shale   Olearia         47\n48 native shale   Olearia         55\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(weeds) # This gives you the number of rows and columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48  4\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can also use nrow(weeds) or ncol(weeds) to get them separately\n\nnames(weeds) # Gives you the column names. \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"weeds\"      \"soil\"       \"species\"    \"flowers.m3\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# I use this when I want the exact name for a column when I am writing analyses (you will see later how useful this can be)\n\nsummary(weeds) # Gives you summary statistics for each column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    weeds               soil             species            flowers.m3   \n Length:48          Length:48          Length:48          Min.   :13.00  \n Class :character   Class :character   Class :character   1st Qu.:22.50  \n Mode  :character   Mode  :character   Mode  :character   Median :33.00  \n                                                          Mean   :33.81  \n                                                          3rd Qu.:45.50  \n                                                          Max.   :57.00  \n```\n\n\n:::\n\n```{.r .cell-code}\n# This will also come in handy later for statistical analysis \n```\n:::\n\n\n\n\nAs you can see, there are many ways to view data within R. Some of these are useful for huge datasets (\\> 10k rows) as the `view()` command can put strain on your computer. Using `head()` or `tail()` to view aspects of the data is useful as it reduces how much is displayed.\\\n::: callout **After reading in dataset, use the summary() command with the \"insecticide\"\" dataset to answer the following questions:**\\\n**Question: What is the minimum value for species richness?** :::\n\n{{% expand Answer %}} **1** {{% /expand %}}\n\n::: callout\n**Question: What is the maximum value for species richness?**\n:::\n\n{{% expand Answer %}} **20** {{% /expand %}}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}