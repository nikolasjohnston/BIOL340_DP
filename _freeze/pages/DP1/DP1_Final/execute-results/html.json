{
  "hash": "b5bbf571a8f897e32314f24d7726dff7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dry Prac 1 — Data analysis in R\"\nauthor: \"Dr Nikolas Johnston, University of Wollongong\"\ndate: \"2025-24-03\"\n---\n\n\n\n\n\n\n# Introduction and Welcome to R!\n\nIn this dry prac, we will learn how to use the `ggplot2` and `tidyverse` packages to create publication-quality bar and scatter plots from the data you generated in Wet Lab 1 & 2. Along the way, we will practice data manipulation, such as removing background absorbance and reshaping data for analysis.\n\nR is a powerful tool for analyzing data, creating visualizations, and performing statistical tests. In cell biology, you can use R to analyze experimental results, such as cell growth rates, gene expression levels, or protein abundance.\n\nLet's dive into the basics of R, starting with something fun: exploring cells and their data!\n\n::: callout-note\n### ACTION REQUIRED {style=\"color: red\"}\n\nOpen R studio on your computer and create a new r script for this class. If you are confused about how to do this refer to the **introduction** section of the BIOL340 practical website.\n:::\n\n# Class Objectives\n\n1.  Understand the basics of R including importing data, basic data manipulation, and generating simple plots.\n2.  Use R to generate Boxplots and Scatter plots of large datasets generated in your Wet Labs.\n3.  Learn to write simple custom lines of R code and utilize generative AI to improve code and correct errors.\n4.  Understand the differences between analysis in Microsoft Excel and R, and appreciate situations in which each tool is most useful.\n5.  Assess and compare cell viability between ‘diseased’ and ‘healthy’ populations, evaluating the sensitivity and characteristics of each of the microplate assays you completed in Wet Lab\n\n## How to Read This Guide\n\nIn the instructions below, there will be chunks of code for you to read and copy into RStudio. The code chunks look like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Just a poor empty chunk with no code\n```\n:::\n\n\n\n\nAnything following a `#` in an R code chunk is a **comment**, which means R will ignore it. These comments are there to help explain what the code is doing.\n\n#### We encourage you to copy and paste the code we provide in these blocks into R studio on your computer. {style=\"color: red\"}\n\n## Getting Started\n\n### Why R?\n\nR is like the mitochondria of data analysis—it's the powerhouse! It can:\n\n-   Analyze large datasets (like transcriptomics data).\n-   Create stunning visualizations (like protein localization heatmaps).\n-   Perform complex statistical tests (like comparing cell survival rates).\n-   Automate repetitive tasks for better reproducibility.\n\n## How to Write Code in R\n\nYou write commands (called **functions**) in the **console** or a **script** in RStudio. Below each code chunk, there may be output (often preceded by `#` if you’re looking at raw code). Let's start with a simple one.\n\nTry running this yourself in RStudio! You can either **copy and paste** the code below or type it out manually. I recommend copying for the rest of this guide as it will make it harder to make mistakes, spelling is very important with code as the computer will take everything you write very literally.\n\nWe can then run this code using the **run** button in the top right corner.\n\n![](run_button.png)\n\nOr by pressing `control + enter` on your keyboard.\n\nWhen you run this code in R, you should see the result, **4**, printed beneath.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This calculates a simple sum\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\nIf you get 4, you've written and executed your first piece of R code. Now things get exciting.\n\n::: callout-note\n### Test your understanding {style=\"color: red\"}\n\nCan you use any other mathematical symbols here? Test it out.\n:::\n\n## Working with Variables\n\nVariables are like labeled containers for your data. These are important because we can use them to store all sorts of things in R. Lets store our calculation as the variable **calc** we do this by writing out the variable name, then using a **\\<-** symbol then typing what we want to store. Copy the below and test it out for yourself.\n\nWe can also check what is stored in a variable by just typing its name and running the code. Let's write **calc** again and see what we have stored. :\n\n::: callout-note\n### Test your understanding {style=\"color: red\"}\n\nSpelling and capitalization are really important. If we captilise the \"C\" in calc what will happen?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Size of the nucleus\ncalc <- 2 + 2  # in micrometers\n\ncalc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\nIt's also possible to store a list of things as a variable. We do this by writing out the list proceeded by a 'c' (for combine), and then seperate every value with a comma. As in the below where we store a list of cool bugs. Because we are using words here(or strings in computer talk) we will use quotations so the computer knows we want it to store exactly the letters we provide it.\n\nYou'll notice that i do not use a space between the words 'cool' and 'bugs', in general spaces are not read well by your computer, it doesn't know what to do with them and it will cause your code to fail.\n\nIt is best practice to never use spaces in any of your file names or code if possible.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#List Nik's favourite bugs\ncool_bugs<- c('flies', 'katydids', 'beetles')\n\n#if we list the variable again remeber it will tell us what it contains. \ncool_bugs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"flies\"    \"katydids\" \"beetles\" \n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n### Test your understanding {style=\"color: red\"}\n\nAdd in two of your favorite bugs into the `cool_bugs` variable. Then run it to make sure it works.\n:::\n\n## Fun with functions\n\nFunctions are one of the most powerful tools in R. They allow us to perform tasks without having to write the same code over and over. A function takes an **input**, does something with it, and then gives back an **output**. You’ve already used one function without realizing it— **`+`**, which is the addition function!\n\nFor example, let's use the function `sqrt()` to calculate the square root of our `calc` variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(calc)  # This finds the square root of 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nMany functions take arguments that you can customize. For example, the `round()` function rounds numbers to a specified number of decimal places:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159, digits = 2)  # Rounds to 2 decimal places\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\n\n\nWe will use a lot of different functions to do powerful things in our data analysis!\n\n::: callout-note\n### Test your understanding {style=\"color: red\"}\n\nCalculate the square root of your `calc` variable then round it to 4 decimal places.\n:::\n\n## Visualizing Data and Installing and Loading Packages\n\nR can make many types of plots. Let's plot our nucleus sizes using **ggplot2**, which is included in the **tidyverse**.\n\nIf you haven't installed the **tidyverse** package yet, you can do so via copying and running:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\nWe also have to load the library by copying and running this line of code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # Loads ggplot2, dplyr, tidyr, and more\n```\n:::\n\n\n\n\nWe are now set up to start looking at our data from **Wet Lab 1**\n\n# Visualizing Cell Counts and Concentration from Wet Lab 1\n\nIn Wet Practical 1, you determined cell concentration and the number of live and dead cells for *healthy* and *diseased* samples.\n\nWe can now import this data for the entire class and visualize it using **ggplot2**. Remember, *working directories* are important in R.\n\nRemember for this class it's not important to understand everything that is happening in the code, just to be able to run it and use Gen AI to edit it.\n\n::: callout-note\n### Action required {style=\"color: red\"}\n\nCopy the below code and change the location of the file in the `read.csv` function to where you file is stored on your computer. Remember we keep the text in quotations so the computer interprets it literally as what we type.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: Setting working directory\n# e.g. for pc: setwd(\"C:/Users/.../Biol340_981/2025/Practicals/Dry_Pracs\")\n\n# Load your data using read.csv e.g. from a mac:\nClass_data <- read.csv(\"~/Library/CloudStorage/OneDrive-Personal/Research/Teaching/Biol340_981/2025/Practicals and Prac manual/Dry practicals/DP_1_data_analysis/cell_count_data.csv\")\n\nhead(Class_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  group      treatment raw_counts cell_concentration X20ul_cell_number\n1 G1_G2 healthy, alive       94.5            1890000             37800\n2 G1_G2  healthy, dead        4.5              90000              1800\n3 G1_G2 disease, alive      94.25            1885000             37700\n4 G3_G4 healthy, alive         47             940000             18800\n5 G3_G4  healthy, dead       1.25              25000               500\n6 G3_G4 disease, alive     107.75            2155000             43100\n  proportion_total_cells\n1                  95.24\n2                   4.76\n3                    100\n4                   97.4\n5                    2.6\n6                   96.4\n```\n\n\n:::\n:::\n\n\n\n\nIf you are curious the functions in the above code chunk do the following: - `setwd()` sets your working directory. - `read.csv()` imports a CSV file. - `mutate()` modifies or adds columns. - `head(Class_data)` prints the first 6 rows, so you can quickly inspect your dataset.\n\n## Making a Boxplot\n\nNow we can analyse this data in interesting ways using ggplot2 a package specifically for graphing included in `tidyverse`. Feel free to play around with labels, colours and themes.\n\nA boxplot helps compare data distributions across categories.\n\nThe below packge function `ggplot()` required a few things first we give it our data variable also known as the data frame `ggplot(Class_data)`. Then we need to tell it what we actually want plotted from this data set, or the asthetics of the graph, this is shortened to list `aes()`, i.e. `ggplot(Class_data, aes(x = x-axis, y = y axis)`. In the below we also tell it to treat the column `cell_concentration` in our data as a numeric factor this just means it will plot it correctly. \n\nWe also will add a **geom** to our plot, this is short for a geometric object - which basically means dots, lines, curves or any other thing we might like to plot. For now we will add a boxplot geom using `geom_boxplot`.\n>Data scientists are not very creative when it comes to naming things, but this means with a bit of thinking, googling or AI searching we can pretty quickly work out what a function or option is doing. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(Class_data, aes(x = treatment, y = as.numeric(cell_concentration))) +\n  geom_boxplot() +\n  theme_minimal()\n\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/box-plots-1.png){width=672}\n:::\n:::\n\n\n\n\n\n::: callout-note\n### Test your understanding {style=\"color: red\"}\nIf you are curious, try changing the aesthetics for the y axis to just be y = cell_concentration to see how it tries to plot the data. What is going on? \n:::\n\nWe can also tidy up this graph and improve how it looks by using options under `labels()` which allows us to add axes and figure labels. We can also use `theme()` which allows us to manipulate different visuals in the graph, in this instance I will use theme_minimal which is a theme included with ggplot, but there are a huge number of customisations you can do by manipulating options within `theme()`. \nObserve the below changes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#coloured boxplot\np <- ggplot(Class_data, aes(x = treatment, y = as.numeric(cell_concentration), color = treatment)) +\n  geom_boxplot() +\n  labs(\n    title = \"Concentration of viable vs. treatment\",\n    x = \"treatment\",\n    y = \"Cell concentration\"\n  ) +\n  theme_minimal()\n# Display the plot\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Question 1 {style=\"color: red\"}\n\n> What changed between the first and second box plots you created? How is this reflected in the code?\n\n## Activity 1 {style=\"color: red\"}\n\n> Make a custom graph with interesting aesthetics. Use generative AI (e.g., ChatGPT or Copilot) to get ideas on what to change (colors, theme, legend placement, etc.). You can copy and paste your code into co-pilot and chatGTP and ask for it to change things based on what you would like to see.\n\n\n# Graphing Wet Lab 2 Microplate Data in R\n\nPrior to this dry lab we have run through the data analysis in Excel, we are now going to try importing the data into R and graphing using the skills you have developed in ggplot2\n\n## Question 2{style=\"color: red\"}\n\n> **Reflect:** What do you think a barrier to analysis the Excel processed data in R will be? What do you think the advantages of using R could be?\n\n\n## Thinking outside the cell, reading and formatting your data\n\nSo far you have been working with your data in cells, using the tools available in Excel and the tables provided in your prac manual. When it comes to importing data into R we have to think a little differently as we no longer work with the data *visually* using a Graphical User Interface (i.e. a GUI).\n\n::: callout-note\n### ACTION REQUIRED {style=\"color: red\"}\n\nFirst we need to convert our excel data from a spreadsheet (or .xls) file to a comma seperated text file (or csv.). \n\nOpen the class data from wetlab 2 and open it in Excel. You can now use `save as` in Excel and choose the option to save as a comma separated file.\n\nThis should save your data with the file extension `.csv`. Now open the data in `Visual Studio Code` on your computer, you will see that all our 'nice' formatting we did to make the data easier to understand actually makes it very confusing for the computer to interpret what each data point means.\n:::\n\nWe need to simplify things so that the software can distinguish between our different variables.\n\nI.e. we need to make it clear what each cell represents in terms of **treatment**, **cell concentration** and **absorbance**. We should also remove our **background** from our absorbance as well.\n\nThe easiest way to do this is to make each of these variables the headings of the columns in your data, then input the information for each data point. This is also sometimes referred to as \"long format\" data. For todays dry prac, we have done this for you.\n\n::: callout-note\n### ACTION REQUIRED {style=\"color: red\"}\n\nDownload the plate data .csv filea for both assays from moodle. This data has already been formatted into \"long format\" for you.\n\nOpen the data for both assays in R and store them as seperate variables using the code below. Remember to change the location in `read.csv()` to where the file is stored on your computer.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplate_data_cAM <- read.csv(\"~/Library/CloudStorage/OneDrive-Personal/Research/Teaching/Biol340_981/2025/Practicals and Prac manual/Dry practicals/DP_1_data_analysis/corrected_class_data_cAM.csv\", row.names = 1, check.names = FALSE)\n\nplate_data_MTS <- read.csv(\"~/Library/CloudStorage/OneDrive-Personal/Research/Teaching/Biol340_981/2025/Practicals and Prac manual/Dry practicals/DP_1_data_analysis/corrected_class_data_MTS.csv\", row.names = 1, check.names = FALSE)\n\n\n\nhead(plate_data_cAM)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Well Absorbance Cell_Type Dilution\n1   A1  45634.083   Healthy  2000000\n2   A2  27520.083   Healthy  1000000\n3   A3  15916.083   Healthy   500000\n4   A4  13197.083   Healthy   250000\n5   A5   9155.083   Healthy   125000\n6   A6   6470.083   Healthy    62500\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(plate_data_MTS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Well Absorbance Cell_Type Dilution GROUP ID\n1   A1    2.49175   Healthy  2000000  G1 & G2\n2   A2    1.96275   Healthy  1000000  G1 & G2\n3   A3    1.23175   Healthy   500000  G1 & G2\n4   A4    0.81075   Healthy   250000  G1 & G2\n5   A5    0.26875   Healthy   125000  G1 & G2\n6   A6    0.14275   Healthy    62500  G1 & G2\n```\n\n\n:::\n:::\n\n\n\n\n## Question 3 {style=\"color: red\"}\n\n> What can you notice is different between how your data was formatted in excel compared to the data we have prepared for you to import into R? Why might this be important.\n\n\n## Plotting the Results\nNow lets make a different type of plot. Let’s create a scatter plot of ***the calcein-AM** using **ggplot2** to visualize how Adjusted Absorbance changes with Cell Concentration.\n\nIn the below plot:\n- `geom_point()` adds scatter plot points.\n- `labs()` adds titles and axis labels.\n- `theme_minimal()` is a clean, modern theme that removes a lot of unnecessary formating.\n\n::: callout-note\nYou will notice that we have some options within `geom_point()` play around with them and see what happens. Why not check other options you could include here by googling or asking AI. You can do some pretty crazy things with custom points or by using `jitter`.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot of Adjusted Absorbance vs. Dilution\n# Colored by Cell_Type\n\nggplot(plate_data_cAM, aes(x = Dilution, y = Absorbance)) +\n  geom_point(alpha = 0.6, size = 2) +\n  labs(\n    title = \"Standard Curve of Absorbance vs Cell Concentration\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nOur plot now has points! But it would also be great to colour by the cell line type.\n\n::: callout-note\n### ACTION REQUIRED {style=\"color: red\"}\nBased on the code you made for boxplots above, how would you colour the data in this plot by cell type?\n:::\n\n\n### Adding a trendline\n\nOur plot could also be improved by adding in a trendline to visualise the data. We can do this using the function `geom_smooth()`. Here we are going to apply a linear model or **'lm'** as our method because we want a straight line. We will also set the option `se` or standard error to = **FALSE**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot of Adjusted Absorbance vs. Dilution\n# Colored by Cell_Type\n\nggplot(plate_data_cAM, aes(x = Dilution, y = Absorbance, color = Cell_Type)) +\n  geom_point(alpha = 0.6, size = 2) +\n  geom_smooth(method ='lm', se = FALSE) +\n  labs(\n    title = \"Standard Curve of Absorbance vs Cell Concentration\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\n### Test your understanding {style=\"color: red\"}\nHave a look (using google or AI) at some of the other types of methods you can use to add a line geom to your plots. One to get you started is `method = \"loess\"`\n:::\n\n\n\n### Log Scale Example\nOur plot looks pretty squashed in the left hand side (lower concentrations). Let's fix that by making it a log graph. This is very easy to do! \n\n::: callout-note\n### ACTION REQUIRED \nLet's add in a lione of code for `scale_x_log10()`. Don't forget to put a `+` at the end so that the computer reads it as part of you graph function. \nYou will notice I also changed the geom for the line below to dashed, because *why not*. Feel free to change it back or look at other options. \n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plate_data_cAM, aes(x = Dilution, y = Absorbance, color = Cell_Type)) +\n  geom_point(alpha = 0.6, size = 2) +\n  geom_smooth(method = \"lm\", se = TRUE, linetype = \"dashed\") +\n  scale_x_log10() +\n  labs(\n    title = \"Standard Curve of Absorbance vs Cell Concentration (Log Scale)\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n## Estimating the Linear Range\n\nWe can also further improve our standard curves by finding the linear portion of the trendline to determine the sensitivity range of the assays. Let's do this by filtering our data for specific dilutions using the function `filter()`. \n\n::: callout-note\n### ACTION REQUIRED \nCopy the below code and change the filtering range to something suitable for your data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_data_cAM <- plate_data_cAM %>%\n  filter(Dilution >= 1000 & Dilution <= 500000)\n```\n:::\n\n\n\n:::\n\n\nNow let's try reploting our graph using the new `linear_data_cAM` variable. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot linear region\nggplot(linear_data_cAM, aes(x = Dilution, y = Absorbance, color = Cell_Type)) +\n  geom_point(alpha = 0.6, size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(\n    title = \"Linear Region of Standard Curve\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n## Activity 2 {style=\"color: red\"}\n\n> Customize your plot to improve its appearance. - Adjust point size and color - Modify or remove legends - Evaluate whether you need to show all data labels or tick marks - Explore other themes (e.g., `theme_bw()`, `theme_classic()`). Feel free to look at the ggplot2 cheat sheet available on the dry prac website, we have also provided extra information for plotting under \"extra help with graphics\"\n\n\n## Activity 3 {style=\"color: red\"}\n\n> Repeat this plot for the MTS dataset. This should be simple as you will only need to change what variable is plotted by code you already have! The code should remain the same. This is one powerful aspect of R, reproducibility!\n\n## Exporting Plots\n\nIn RStudio, use the **Plots** pane (bottom-right) and click **Export** to save your plots as an image (PNG, JPEG) or PDF. You can also programmatically export using `ggsave()`.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"myplot.png\", plot = p, width = 6, height = 4)\n```\n:::\n\n\n\n\n## Activity 4 {style=\"color: red\"}\n\n> Export your final R-generated figures for the MTS and Calcein-AM assays as PNG files. Try setting the file dimensions to 600×400.\n\n## Question 4 {style=\"color: red\"}\n\n> Where do these files save on your computer? Why is that location used?\n\n## Question 5 {style=\"color: red\"}\n\n> Write a brief comparison of the two assays you performed. Which was faster, more reproducible, or more sensitive?\n\n\\newpage\n\n# Common Errors and How to Fix Them\n\nSome commonly encountered errors include:\n\n-   **Package not found** → Make sure you’ve installed and loaded the package.\n-   **Object not found** → Check for typos in function or variable names.\n-   **Incorrect file path** → Check for typos in the file path. Make sure you have set the correct working directory.\n-   **Mismatched column names** → R is case-sensitive.\n\n\\newpage\n\n# Conclusion\n\nIn this Dry Practical, we:\n\n-   Learned how to import and analyse data in both Excel and R.\n-   Learnt how to generate **box** and **scatter** plots in R\n-   Constructed **standard curves** in Excel and R.\n-   Determined the **linear range** using regression.\n-   Calculated **cell viability** for diseased vs. healthy cells.\n",
    "supporting": [
      "DP1_Final_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}