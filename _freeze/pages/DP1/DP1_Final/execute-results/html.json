{
  "hash": "5e888e38f352e1ee43d32da302ce7649",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dry Prac 1 — Data analysis in R\"\nauthor: \"Dr Nikolas Johnston, University of Wollongong\"\ndate: \"2025-24-03\"\n---\n\n\n\n\n\n\n# Objectives\n\n1.  Understand the basics of R including importing data, basic data manipulation, and generating simple plots.\n2.  Use R to generate Boxplots and Scatter plots of large datasets generated in your Wet Labs.\n3.  Learn to write simple custom lines of R code and utilize generative AI to improve code and correct errors.\n4.  Understand the differences between analysis in Microsoft Excel and R, and appreciate situations in which each tool is most useful.\n5.  Assess and compare cell viability between ‘diseased’ and ‘healthy’ populations, evaluating the sensitivity and characteristics of each of the microplate assays you completed in Wet Lab 2.\n\n# Introduction and Welcome to R!\n\nIn this dry prac, we will learn how to use the `ggplot2` and `tidyverse` packages to create publication-quality bar and scatter plots from the data you generated in Wet Lab 1 & 2. Along the way, we will practice data manipulation, such as removing background absorbance and reshaping data for analysis.\n\nR is a powerful tool for analyzing data, creating visualizations, and performing statistical tests. In cell biology, you can use R to analyze experimental results, such as cell growth rates, gene expression levels, or protein abundance.\n\nLet's dive into the basics of R, starting with something fun: exploring cells and their data!\n\n## Getting Started\n\n### Why R?\n\nR is like the mitochondria of data analysis—it's the powerhouse! It can:\n\n-   Analyze large datasets (like transcriptomics data).\n-   Create stunning visualizations (like protein localization heatmaps).\n-   Perform complex statistical tests (like comparing cell survival rates).\n-   Automate repetitive tasks for better reproducibility.\n\n## How to Read This Guide\n\nIn the instructions below, there will be chunks of code for you to read and copy into RStudio. The code chunks look like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Just a poor empty chunk with no code\n```\n:::\n\n\n\n\nAnything following a `#` in an R code chunk is a **comment**, which means R will ignore it. These comments are there to help explain what the code is doing.\n\n## How to Write Code in R\n\nYou write commands (called **functions**) in the **console** or a **script** in RStudio. Below each code chunk, there may be output (often preceded by `#` if you’re looking at raw code). Let's start with a simple one:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This calculates a simple sum\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\nWhen you run this code in R, you should see the result, **4**, printed beneath.\n\nTry running this yourself in RStudio! If you get 4, you've written and executed your first piece of R code. Now things get exciting.\n\n## Working with Variables\n\nVariables are like labeled containers for your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Size of the nucleus\nnucleus_size <- 5.6  # in micrometers\nnucleus_size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.6\n```\n\n\n:::\n:::\n\n\n\n\nHere, `nucleus_size` is a variable that stores the numeric value **5.6**.\n\nFor multiple measurements, you can store a group of values in a **vector**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Nucleus sizes of five cells\nnucleus_sizes <- c(5.6, 6.1, 5.8, 6.2, 5.9)\nnucleus_sizes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.6 6.1 5.8 6.2 5.9\n```\n\n\n:::\n:::\n\n\n\n\n`c()` (short for combine) creates a vector, which is a basic data structure in R.\n\n## Basic Statistics\n\nBiologists often need to analyze data with simple statistical functions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mean size\nmean_nucleus <- mean(nucleus_sizes)\nmean_nucleus\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.92\n```\n\n\n:::\n:::\n\n\n\n\nThe `mean()` function calculates the average. Similarly, you can find other basic stats:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Maximum size\nmax(nucleus_sizes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.2\n```\n\n\n:::\n:::\n\n\n\n\nThese straightforward functions allow you to summarize your data quickly.\n\n## Visualizing Data\n\nR can make many types of plots. Let's plot our nucleus sizes using **ggplot2**, which is included in the **tidyverse**.\n\n### Installing and Loading Packages\n\nIf you haven't installed the **tidyverse** package yet, you can do so via:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\nThen load it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # Loads ggplot2, dplyr, tidyr, and more\n```\n:::\n\n\n\n\n### Example: A Simple Bar Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a bar plot of nucleus sizes\n# First, create a data frame with cell numbers and sizes\nnucleus_data <- data.frame(Cell = 1:5, Size = nucleus_sizes)\n\n# Use ggplot2 for plotting\nggplot(nucleus_data, aes(x = factor(Cell), y = Size)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Nucleus Sizes in Cells\", x = \"Cell Number\", y = \"Nucleus Size (µm)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n`geom_bar(stat = \"identity\")` tells ggplot2 to create bars whose heights are determined by the `Size` value.\n\n## 1. Loading Libraries\n\nWe rely on `tidyverse` (which includes **dplyr** and **ggplot2**) for data manipulation and visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # Loads ggplot2, dplyr, tidyr, and more\n```\n:::\n\n\n\n\n## 2. Simulating a Dataset\n\nIn this example, we simulate a dataset to explore how absorbance might vary with cell concentration for three groups: *Control*, *Treatment A*, and *Treatment B*. We also include a background absorbance value to remove during preprocessing.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set a seed for the randomisation of data\nset.seed(123) # For reproducibility\n\n# Create a tibble (tidyverse's modern dataframe)\ndata <- tibble::tibble(\n  Cell_Concentration = rep(seq(1, 100, by = 5), times = 3),\n  Absorbance = c(\n    runif(20, min = 0.1, max = 0.5), # Control data points\n    runif(20, min = 0.4, max = 1.0), # Treatment A data points\n    runif(20, min = 0.8, max = 1.5)  # Treatment B data points\n  ) + 0.05,  # Add background noise\n  Treatment = rep(c(\"Control\", \"Treatment A\", \"Treatment B\"), each = 20),\n  Background = 0.05\n)\n\n# Preview the data\nhead(data)  # Shows the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Cell_Concentration Absorbance Treatment Background\n               <dbl>      <dbl> <chr>          <dbl>\n1                  1      0.265 Control         0.05\n2                  6      0.465 Control         0.05\n3                 11      0.314 Control         0.05\n4                 16      0.503 Control         0.05\n5                 21      0.526 Control         0.05\n6                 26      0.168 Control         0.05\n```\n\n\n:::\n:::\n\n\n\n\n-   `seq(1, 100, by = 5) generates numbers from 1 to 100, in increments of 5.`\n\n-   `runif() creates random values between a minimum and maximum.`\n\n-   `head() displays the first 6 rows of a dataset, which helps you quickly inspect its structure.`\n\n> ### Tibbles vs Data Frames\n>\n> In base R, data is often stored in **data frames**, which are 2D structures (rows and columns) where each column can have a different data type. **Tibbles** are a modern take on data frames provided by the **tibble** package (part of the tidyverse). They have a few advantages:\n>\n> **Printing**: Tibbles show only the first few rows and columns by default, making large datasets easier to inspect.\n>\n> **Strictness**: Tibbles don’t change variable names or types without asking, and never partially match them.\n>\n> **Compatibility**: They still function just like data frames in most situations, so you can use standard functions like `head()`, `str()`, and `summary()`.\n\n## 3. Remove Background Absorbance\n\nWe subtract the background absorbance to isolate the absorbance caused by the treatments alone.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>%\n  mutate(Adjusted_Absorbance = Absorbance - Background)\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  Cell_Concentration Absorbance Treatment Background Adjusted_Absorbance\n               <dbl>      <dbl> <chr>          <dbl>               <dbl>\n1                  1      0.265 Control         0.05               0.215\n2                  6      0.465 Control         0.05               0.415\n3                 11      0.314 Control         0.05               0.264\n4                 16      0.503 Control         0.05               0.453\n5                 21      0.526 Control         0.05               0.476\n6                 26      0.168 Control         0.05               0.118\n```\n\n\n:::\n:::\n\n\n\n\nHere, `%>%` (the *pipe*) let's us chain commands for readability.\n\n## 4. Basic Scatter Plot\n\nLet's create a scatter plot using **ggplot2** to visualize how Adjusted Absorbance changes with Cell Concentration.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data, aes(x = Cell_Concentration, y = Adjusted_Absorbance)) +\n  geom_point() +\n  labs(\n    title = \"Adjusted Absorbance by Cell Concentration\",\n    x = \"Cell Concentration\",\n    y = \"Adjusted Absorbance\"\n  ) +\n  theme_minimal()\n\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/basic-scatter-1.png){width=672}\n:::\n:::\n\n\n\n\n-   `geom_point()` adds scatter plot points.\n-   `labs()` adds titles and axis labels.\n-   `theme_minimal()` is a clean, modern theme.\n\n## 5. Grouping by Treatment\n\nWe can make comparisons clearer by coloring points by their treatment group.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data, aes(x = Cell_Concentration, y = Adjusted_Absorbance, color = Treatment)) +\n  geom_point(size = 3) +\n  labs(\n    title = \"Adjusted Absorbance by Cell Concentration and Treatment\",\n    x = \"Cell Concentration\",\n    y = \"Adjusted Absorbance\",\n    color = \"Treatment\"\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/group-scatter-1.png){width=672}\n:::\n:::\n\n\n\n\n## 6. Adding a Trend Line\n\nWe can add a trend line to see if there’s a linear relationship.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data, aes(x = Cell_Concentration, y = Adjusted_Absorbance, color = Treatment)) +\n  geom_point(size = 3) +\n  geom_smooth(se = FALSE, method = \"lm\") +\n  labs(\n    title = \"Trends in Adjusted Absorbance\",\n    x = \"Cell Concentration\",\n    y = \"Adjusted Absorbance\",\n    color = \"Treatment\"\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/smooth-trend-1.png){width=672}\n:::\n:::\n\n\n\n\n-   `geom_smooth(method = \"lm\")` fits a linear model.\n-   `se = FALSE` hides the shaded confidence interval.\n\n## 7. Customizing Plots\n\nYou can customize colors, fonts, and more.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data, aes(x = Cell_Concentration, y = Adjusted_Absorbance, color = Treatment)) +\n  geom_point(size = 3, alpha = 0.8) +  # Adjust transparency with alpha\n  geom_smooth(se = FALSE, method = \"lm\", linetype = \"dashed\") +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Customized Adjusted Absorbance Trends\",\n    subtitle = \"Data Adjusted for Background Noise\",\n    x = \"Cell Concentration\",\n    y = \"Adjusted Absorbance\",\n    color = \"Treatment Group\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n    plot.subtitle = element_text(face = \"italic\"),\n    axis.text.x = element_text(angle = 0, vjust = 0.5)\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/customized-plot-1.png){width=672}\n:::\n:::\n\n\n\n\n\\newpage\n\n# Visualizing Cell Counts and Concentration from Wet Lab 1\n\nIn Wet Practical 1, you determined cell concentration and the number of live and dead cells for *healthy* and *diseased* samples.\n\nWe can now import this data for the entire class and visualize it using **ggplot2**. Remember, *working directories* are important in R.\n\n## Setting a Working Directory and Importing Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: Setting working directory\n# e.g. for pc: setwd(\"C:/Users/.../Biol340_981/2025/Practicals/Dry_Pracs\")\n\n# Load your data using read.csv e.g. from a mac:\nClass_data <- read.csv(\"~/Library/CloudStorage/OneDrive-Personal/Research/Teaching/Biol340_981/2025/Practicals and Prac manual/Dry practicals/DP_1_data_analysis/cell_count.csv\") %>%\n  dplyr::mutate(\n    cell.concentration = stringr::str_remove_all(cell.concentration, \",\")\n  )\n\nhead(Class_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       treatment Raw.counts cell.concentration Number.of.cells.in.20.uL.sample\n1 healthy, alive        195            3900000                              78\n2 healthy, alive        202            4040000                              81\n3 healthy, alive        198            3960000                              79\n4 healthy, alive        205            4100000                              82\n5 healthy, alive        192            3840000                              77\n6 healthy, alive        210            4200000                              84\n  Proportion.of.total.cells....\n1                         4.20%\n2                         4.40%\n3                         4.30%\n4                         4.50%\n5                         4.10%\n6                         4.60%\n```\n\n\n:::\n:::\n\n\n\n\n-   `setwd()` sets your working directory.\n-   `read.csv()` imports a CSV file.\n-   `mutate()` modifies or adds columns.\n-   `head(Class_data)` prints the first 6 rows, so you can quickly inspect your dataset.\n\n## Making a Boxplot\n\nNow we can analyse this data in interesting ways using ggplot2 as you learnt above. Feel free to play around with labels, colours and themes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(Class_data, aes(x = treatment, y = as.numeric(cell.concentration))) +\n  geom_boxplot() +\n  labs(\n    title = \"Concentration of Viable vs. Treatment\",\n    x = \"Treatment\",\n    y = \"Cell Concentration\"\n  ) +\n  theme_minimal()\n\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/box-plots-1.png){width=672}\n:::\n:::\n\n\n\n\nA boxplot helps compare data distributions across categories.\n\nWe can also tidy up this graph and improve how it looks by using options under `labels()` which allows us to add axes and figure labels. We can also use `theme()` which allows us to manipulate different visuals in the graph, in this instance I will use theme_minimal which is a theme included with ggplot, but there are a huge number of customisations you can do by manipulating options within `theme()`.\n\nObserve the below changes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#coloured boxplot\np <- ggplot(Class_data, aes(x = treatment, y = as.numeric(cell.concentration), color = treatment)) +\n  geom_boxplot() +\n  labs(\n    title = \"Concentration of viable vs. treatment\",\n    x = \"treatment\",\n    y = \"Cell concentration\"\n  ) +\n  theme_minimal()\n# Display the plot\np\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## Question 1 {style=\"color: red\"}\n\n> What changed between the first and second box plots you created? How is this reflected in the code?\n\n## Activity 1 {style=\"color: red\"}\n\n> Make a custom graph with interesting aesthetics. Use generative AI (e.g., ChatGPT or Copilot) to get ideas on what to change (colors, theme, legend placement, etc.).\n\n# Graphing Wet Lab 2 Microplate Data in R\n\nPrior to this dry lab we have run through the data analysis in Excel, we are now going to try importing the data into R and graphing using the skills you have developed in ggplot2\n\n## Question 3\n\n> **Reflect:** What do you think a barrier to analysis the Excel processed data in R will be? What do you think the advantages of using R could be?\n\n### Thinking outside the cell\n\nSo far you have been working with your data in cells, using the tools available in Excel and the tables provided in your prac manual. When it comes to importing data into R we have to think a little differently as we no longer work with the data *visually* using a Graphical User Interface (i.e. a GUI).\n\nFirst we need to convert our excel data from a spreadsheet (or .xls) file to a comma seperated text file (or csv.). This is fairly straight forward - you can use `save as` in Excel and choose the option to save as a comma seperated file.\n\nThis should save your data with the file extension `.csv`. Now if you open the data in `Visual Studio Code` on your computer you will see that all our 'nice' formatting we did to make the data easier to understand actually makes it very confusing for the computer to intepret what each data point means. We need to simplify things so that the software can distinguish between our different variables.\n\nI.e. we need to make it clear what each cell represents in terms of **treatment**, **cell concentration** and **absorbance**. We should also label our **background** as well.\n\nThe easiest way to do this is to make each of these variables the headings of the columns in your data, then input the information for each data point.\n\nThis is also sometimes referred to as \"long format\" data.\n\n## Read and Format the Data\n\nWe often need to convert Excel data (spreadsheet .xls files) to CSV format so R can interpret it easily.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplate_data <- read.csv(\"~/Library/CloudStorage/OneDrive-Personal/Research/Teaching/Biol340_981/2025/Practicals and Prac manual/Dry practicals/DP_1_data_analysis/plate_assay.csv\", row.names = 1, check.names = FALSE)\n\nplate_data <- plate_data %>%\n  rownames_to_column(var = \"Row\")\n\nhead(plate_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Row      1      2      3      4      5     6     7     8     9    10    11\n1   A 234638 187876 135865 110923  79043 71551 60742 55209 56095 55784 50266\n2   B 237329 251471 177995 134888 109490 81295 72256 69348 61904 55070 62208\n3   C 260000 253403 202066 142151  98816 84420 66989 64180 58341 57809 53425\n4   D 220862 170740 125864  99798  65767 54054 41551 35483 43790 43308 35739\n5   E 226793 237859 164632 120421  94399 69086 61250 55252 42034 36285 52078\n6   F 240179 242925 190130 131232  79451 67181 50684 52038 40665 38387 42372\n    12\n1 3582\n2 3582\n3 3582\n4 3582\n5 3577\n6 3556\n```\n\n\n:::\n:::\n\n\n\n\n-   `row.names = 1` treats the first column as row names.\n-   `check.names = FALSE` avoids automatic renaming.\n-   `rownames_to_column()` turns row names into a column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert wide data to long format\nplate_long <- plate_data %>%\n  pivot_longer(-Row, names_to = \"Column\", values_to = \"Absorbance\") %>%\n  mutate(Column = as.numeric(Column))\n\n# Classify cell types\nplate_long <- plate_long %>%\n  mutate(\n    Cell_Type = case_when(\n      Row %in% c(\"A\", \"B\", \"C\") ~ \"Healthy\",\n      Row %in% c(\"D\", \"E\", \"F\") ~ \"Diseased\",\n      Row %in% c(\"G\", \"H\")       ~ \"Blank\"\n    )\n  )\n\n# Remove Blanks\nplate_long <- plate_long %>%\n  filter(Cell_Type != \"Blank\")\n\n# Add dilution info (example)\nstarting_concentration <- 2000000  # First column concentration\nplate_long <- plate_long %>% mutate(\n  Dilution = starting_concentration * (1 / 2)^(Column - 1)\n)\n\nhead(plate_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  Row   Column Absorbance Cell_Type Dilution\n  <chr>  <dbl>      <int> <chr>        <dbl>\n1 A          1     234638 Healthy    2000000\n2 A          2     187876 Healthy    1000000\n3 A          3     135865 Healthy     500000\n4 A          4     110923 Healthy     250000\n5 A          5      79043 Healthy     125000\n6 A          6      71551 Healthy      62500\n```\n\n\n:::\n:::\n\n\n\n\n## Subtract Background\n\nHere, we compute background as the mean absorbance of wells in the last column (Column 12) and subtract it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbackground_absorbance <- plate_long %>%\n  filter(Column == 12) %>%\n  summarize(Mean_Background = mean(Absorbance, na.rm = TRUE)) %>%\n  pull(Mean_Background)\n\nplate_long_corrected <- plate_long %>%\n  mutate(Adjusted_Absorbance = Absorbance - background_absorbance)\n\nhead(plate_long_corrected)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  Row   Column Absorbance Cell_Type Dilution Adjusted_Absorbance\n  <chr>  <dbl>      <int> <chr>        <dbl>               <dbl>\n1 A          1     234638 Healthy    2000000             231061.\n2 A          2     187876 Healthy    1000000             184299.\n3 A          3     135865 Healthy     500000             132288.\n4 A          4     110923 Healthy     250000             107346.\n5 A          5      79043 Healthy     125000              75466.\n6 A          6      71551 Healthy      62500              67974.\n```\n\n\n:::\n:::\n\n\n\n\n## Question 4 {style=\"color: red\"}\n\n> Which data frame should we plot?\n\n## Plotting the Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot of Adjusted Absorbance vs. Dilution\n# Colored by Cell_Type\n\nggplot(plate_long_corrected, aes(x = Dilution, y = Adjusted_Absorbance, color = Cell_Type)) +\n  geom_point(alpha = 0.6, size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE, linetype = \"dashed\") +\n  labs(\n    title = \"Standard Curve of Absorbance vs Cell Concentration\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\nThat plot looks pretty squashed in the left hand side (lower concentrations). Let's fix that by making it a log graph. This is very easy to do now that we have done all our data manipulation. We will just add in the line `scale_x_log10()`.\n\n### Log Scale Example\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plate_long_corrected, aes(x = Dilution, y = Adjusted_Absorbance, color = Cell_Type)) +\n  geom_point(alpha = 0.6, size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE, linetype = \"dashed\") +\n  scale_x_log10() +\n  labs(\n    title = \"Standard Curve of Absorbance vs Cell Concentration (Log Scale)\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n## Estimating the Linear Range\n\nWe can improve our standard curves by finding the linear portion of the trendline to determine the sensitivity range of the assays.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_data <- plate_long_corrected %>%\n  filter(Dilution >= 1000 & Dilution <= 500000)\n\n# Plot linear region\nggplot(linear_data, aes(x = Dilution, y = Adjusted_Absorbance, color = Cell_Type)) +\n  geom_point(alpha = 0.6, size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(\n    title = \"Linear Region of Standard Curve\",\n    x = \"Cell Concentration (cells/mL)\",\n    y = \"Adjusted Absorbance\",\n    color = \"Cell Type\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DP1_Final_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n## Activity 3 {style=\"color: red\"}\n\n> Customize your plot to improve its appearance. - Adjust point size and color - Modify or remove legends - Evaluate whether you need to show all data labels or tick marks - Explore other themes (e.g., `theme_bw()`, `theme_classic()`). Feel free to look at the ggplot2 cheat sheet available on Moodle.\n\n## Activity 4 {style=\"color: red\"}\n\n> Choose an appropriate cell density within this range to compare the results of the ‘diseased’ cell suspension and calculate the difference in viability between these two populations of cells (assuming 100 % viability of the ‘healthy’ cell suspension).\n\n## Activity 5 {style=\"color: red\"}\n\n> Repeat this plot for the other assay dataset. This should be simple as you will only need to change the input .csv file the code should remain the same. This is one powerful aspect of R, reproducibility!\n\n## Exporting Plots\n\nIn RStudio, use the **Plots** pane (bottom-right) and click **Export** to save your plots as an image (PNG, JPEG) or PDF. You can also programmatically export using `ggsave()`.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"myplot.png\", plot = p, width = 6, height = 4)\n```\n:::\n\n\n\n\n## Activity 6 {style=\"color: red\"}\n\n> Export your final R-generated figures for the MTS and Calcein-AM assays as PNG files. Try setting the file dimensions to 600×400.\n\n## Question 5 {style=\"color: red\"}\n\n> Where do these files save on your computer? Why is that location used?\n\n## Question 6 {style=\"color: red\"}\n\n> Write a brief comparison of the two assays you performed. Which was faster, more reproducible, or more sensitive?\n\n\\newpage\n\n# Common Errors and How to Fix Them\n\nBeginners often encounter errors like:\n\n-   **Package not found** → Make sure you’ve installed and loaded the package.\n-   **Object not found** → Check for typos in function or variable names.\n-   **Incorrect file path** → Check for typos in the file path. Make sure you have set the correct working directory.\n-   **Mismatched column names** → R is case-sensitive.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: Fixing a missing package error\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) install.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\\newpage\n\n# Conclusion\n\nIn this Dry Practical, we:\n\n-   Learned how to import and analyse data in both Excel and R.\n-   Learnt how to generate **box** and **scatter** plots in R\n-   Constructed **standard curves** in Excel and R.\n-   Determined the **linear range** using regression.\n-   Calculated **cell viability** for diseased vs. healthy cells.\n",
    "supporting": [
      "DP1_Final_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}